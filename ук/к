Хорошо, давайте реализуем централизованный обработчик ICMP-ответов. Это позволит эффективно распределять входящие пакеты между серверами и избежать ложных срабатываний. Вот как это можно сделать:

### 1. Сначала модифицируем `main.go`:

```go
package main

import (
    	"context"
        	"fmt"
            	"log"
                	"net/http"
                    	"os"
                        	"os/signal"
                            	"ping-monitor/api"
                                	"ping-monitor/config"
                                    	"ping-monitor/front"
                                        	"ping-monitor/models"
                                            	"ping-monitor/ping"
                                                	"sync"
                                                    	"syscall"
                                                        	"time"

                                                            	"github.com/go-ini/ini"
                                                                	"github.com/labstack/echo/v4"
                                                                    	"github.com/labstack/echo/v4/middleware"
)

const (
    	pingInterval = 5 * time.Second
        	pingTimeout  = 60 * time.Second
)

func main() {
    	e := echo.New()
        	e.Use(middleware.Logger())
            	e.Use(middleware.Recover())
                	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
                        		AllowOrigins: []string{"*"},
                                		AllowMethods: []string{http.MethodGet, http.MethodHead, http.MethodPut, http.MethodPatch, http.MethodPost, http.MethodDelete},
                    }))

                    	frontPath, err := front.GetFrontPath()
                        	if err != nil {
                                		log.Fatalf("Error getting frontend path: %v", err)
                            }

                            	fs := http.FileServer(http.Dir(frontPath))
                                	e.GET("/*", echo.WrapHandler(http.StripPrefix("/", fs)))

                                    	servers := []models.Server{}
                                        	var mu sync.Mutex

                                            	configFile, err := config.GetConfigPath()
                                                	if err != nil {
                                                        		panic(err)
                                                    }

                                                    	newServers, err := config.LoadConfig(configFile)
                                                        	if err != nil {
                                                                		log.Fatalf("Failed to load configuration: %v", err)
                                                            }
                                                            	servers = newServers

                                                                	// Создаем центральный обработчик ICMP
                                                                    	icmpHandler := ping.NewICMPHandler()
                                                                        	defer icmpHandler.Close()

                                                                            	// Присваиваем каждому серверу уникальный ICMP ID и регистрируем его в обработчике
                                                                                	for i := range servers {
                                                                                        		servers[i].ICMPID = uint16(i + 1)
                                                                                                		icmpHandler.RegisterServer(&servers[i])
                                                                                    }

                                                                                    	ctx, cancel := context.WithCancel(context.Background())
                                                                                        	defer cancel()

                                                                                            	// Запускаем центральный обработчик
                                                                                                	go icmpHandler.Run(ctx)

                                                                                                    	// Запускаем мониторинг серверов
                                                                                                        	go ping.MonitorServers(&servers, pingInterval, pingTimeout, &mu, ctx, icmpHandler)
                                                                                                            	api.RegisterHandlers(e, &servers, &mu)

                                                                                                                	ctf, err := ini.Load(configFile)
                                                                                                                    	if err != nil {
                                                                                                                            		log.Printf("Failed to load ini config file: %v", err)
                                                                                                                        }

                                                                                                                        	webport := ctf.Section("settings").Key("webport").MustString("8888")
                                                                                                                            	addr := fmt.Sprintf(":%s", webport)
                                                                                                                                	log.Printf("Server address: %s", addr)

                                                                                                                                    	go func() {
                                                                                                                                            		if err := e.Start(addr); err != nil && err != http.ErrServerClosed {
                                                                                                                                                        			e.Logger.Fatalf("Shutting down the server: %v", err)
                                                                                                                                                    }
                                                                                                                                        }()

                                                                                                                                        	quit := make(chan os.Signal, 1)
                                                                                                                                            	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
                                                                                                                                                	<-quit
                                                                                                                                                    	log.Println("Shutting down server...")
                                                                                                                                                        	e.Close()
                                                                                                                                                            	log.Println("Server gracefully stopped")
}
```

### 2. Создадим новый файл `ichandler.go` для центрального обработчика:

```go
package ping

import (
    	"context"
        	"log"
            	"net"
                	"ping-monitor/models"
                    	"sync"
                        	"time"

                            	"golang.org/x/net/icmp"
                                	"golang.org/x/net/ipv4"
)

type ICMPHandler struct {
    	conn      *icmp.PacketConn
        	servers   map[uint16]*models.Server
            	responses chan *icmpResponse
                	mu        sync.Mutex
}

type icmpResponse struct {
    	id   uint16
        	seq  int
            	addr net.Addr
}

func NewICMPHandler() *ICMPHandler {
    	conn, err := icmp.ListenPacket("ip4:icmp", "0.0.0.0")
        	if err != nil {
                		log.Fatalf("Failed to create ICMP listener: %v", err)
            }

            	return &ICMPHandler{
                    		conn:      conn,
                            		servers:   make(map[uint16]*models.Server),
                                    		responses: make(chan *icmpResponse, 100),
                }
}

func (h *ICMPHandler) RegisterServer(server *models.Server) {
    	h.mu.Lock()
        	defer h.mu.Unlock()
            	h.servers[server.ICMPID] = server
}

func (h *ICMPHandler) UnregisterServer(id uint16) {
    	h.mu.Lock()
        	defer h.mu.Unlock()
            	delete(h.servers, id)
}

func (h *ICMPHandler) Run(ctx context.Context) {
    	// Горутина для чтения всех входящих ICMP-ответов
        	go h.readResponses(ctx)

            	// Горутина для обработки ответов
                	go h.processResponses(ctx)
}

func (h *ICMPHandler) readResponses(ctx context.Context) {
    	rb := make([]byte, 1500)
        	for {
                		select {
                            		case <-ctx.Done():
                                    			return
                                                		default:
                                                        			n, peer, err := h.conn.ReadFrom(rb)
                                                                    			if err != nil {
                                                                                    				if netErr, ok := err.(net.Error); ok && netErr.Timeout() {
                                                                                                        					continue
                                                                                                    }
                                                                                                    				log.Printf("ICMP read error: %v", err)
                                                                                                                    				continue
                                                                                }

                                                                                			rm, err := icmp.ParseMessage(1, rb[:n])
                                                                                            			if err != nil {
                                                                                                            				log.Printf("ICMP parse error: %v", err)
                                                                                                                            				continue
                                                                                                        }

                                                                                                        			if rm.Type != ipv4.ICMPTypeEchoReply {
                                                                                                                        				continue
                                                                                                                    }

                                                                                                                    			switch body := rm.Body.(type) {
                                                                                                                                    			case *icmp.Echo:
                                                                                                                                                				h.responses <- &icmpResponse{
                                                                                                                                                                    					id:   uint16(body.ID),
                                                                                                                                                                                        					seq:  body.Seq,
                                                                                                                                                                                                            					addr: peer,
                                                                                                                                                                }
                                                                                                                                }
                        }
            }
}

func (h *ICMPHandler) processResponses(ctx context.Context) {
    	for {
            		select {
                        		case <-ctx.Done():
                                			return
                                            		case resp := <-h.responses:
                                                    			h.mu.Lock()
                                                                			server, exists := h.servers[resp.id]
                                                                            			h.mu.Unlock()

                                                                                        			if exists {
                                                                                                        				log.Printf("ICMP response for server %s (ID: %d, Seq: %d) from %s", 
                                                                                                                        					server.Name, resp.id, resp.seq, resp.addr.String())
                                                                                                                                            				server.MarkAlive()
                                                                                                    }
                    }
        }
}

func (h *ICMPHandler) SendRequest(ip string, id uint16, seq int, timeout time.Duration) error {
    	ipAddr, err := net.ResolveIPAddr("ip4", ip)
        	if err != nil {
                		return err
            }

            	wm := icmp.Message{
                    		Type: ipv4.ICMPTypeEcho,
                            		Code: 0,
                                    		Body: &icmp.Echo{
                                                			ID:   int(id),
                                                            			Seq:  seq,
                                                                        			Data: []byte("ping"),
                                            },
                }

                	wb, err := wm.Marshal(nil)
                    	if err != nil {
                            		return err
                        }

                        	_, err = h.conn.WriteTo(wb, ipAddr)
                            	return err
}

func (h *ICMPHandler) Close() {
    	h.conn.Close()
}
```

### 3. Модифицируем `ping.go`:

```go
package ping

import (
    	"context"
        	"log"
            	"ping-monitor/models"
                	"sync"
                    	"time"
)

const (
    	maxPingAttempts = 5
        	logPrefix       = "PING: "
)

func PingServer(server *models.Server, wg *sync.WaitGroup, mu *sync.Mutex, timeout time.Duration, handler *ICMPHandler) {
    	defer wg.Done()

        	var isAlive bool
            	for attempt := 0; attempt < maxPingAttempts; attempt++ {
                    		log.Printf("%sServer %s (%s) - Attempt %d/%d (ID: %d)", 
                            			logPrefix, server.Name, server.IP, attempt+1, maxPingAttempts, server.ICMPID)

                                        		seq := time.Now().Nanosecond() & 0xffff
                                                		err := handler.SendRequest(server.IP, server.ICMPID, seq, timeout)
                                                        		if err != nil {
                                                                    			log.Printf("%sServer %s (%s) - Send error: %v", logPrefix, server.Name, server.IP, err)
                                                                                			continue
                                                                }

                                                                		// Ждем ответа (сервер сам отметится через MarkAlive)
                                                                        		select {
                                                                                    		case <-time.After(timeout):
                                                                                            			log.Printf("%sServer %s (%s) - Timeout waiting for response", logPrefix, server.Name, server.IP)
                                                                                                        		case <-server.GetResponseChan():
                                                                                                                			isAlive = true
                                                                                                                            			log.Printf("%sServer %s (%s) - PING SUCCESS after attempt %d", logPrefix, server.Name, server.IP, attempt+1)
                                                                                                                                        			break
                                                                                }

                                                                                		if isAlive {
                                                                                            			break
                                                                                        }
                                                                                        		time.Sleep(timeout / time.Duration(maxPingAttempts))
                }

                	mu.Lock()
                    	defer mu.Unlock()

                        	if isAlive {
                                		server.Failures = 0
                                        		server.Status = "alive"
                            } else {
                                		server.Failures++
                                        		if server.Failures >= 3 {
                                                    			server.Status = "dead"
                                                }
                            }
                            	server.LastPing = time.Now()
                                	log.Printf("%sServer %s (%s) - Status: %s (Failures: %d)", logPrefix, server.Name, server.IP, server.Status, server.Failures)
}

func MonitorServers(servers *[]models.Server, interval time.Duration, timeout time.Duration, mu *sync.Mutex, ctx context.Context, handler *ICMPHandler) {
    	var wg sync.WaitGroup
        	for i := range *servers {
                		if (*servers)[i].IP != "" {
                            			wg.Add(1)
                                        			go monitorSingleServer(ctx, &(*servers)[i], interval, timeout, mu, &wg, handler)
                        }
            }
            	wg.Wait()
}

func monitorSingleServer(ctx context.Context, server *models.Server, interval time.Duration, timeout time.Duration, mu *sync.Mutex, wg *sync.WaitGroup, handler *ICMPHandler) {
    	defer wg.Done()
        	ticker := time.NewTicker(interval)
            	defer ticker.Stop()

                	for {
                        		select {
                                    		case <-ctx.Done():
                                            			log.Printf("Monitoring stopped for server %s", server.IP)
                                                        			return
                                                                    		case <-ticker.C:
                                                                            			func() {
                                                                                            				defer func() {
                                                                                                                					if r := recover(); r != nil {
                                                                                                                                        						log.Printf("Recovered from panic: %v", r)
                                                                                                                                    }
                                                                                                            }()
                                                                                                            				PingServer(server, wg, mu, timeout, handler)
                                                                                        }()
                                }
                    }
}
```

### 4. Добавим методы в `models.Server` (в файле `models/server.go`):

```go
package models

import "sync"

type Server struct {
    	// ... существующие поля ...
        	responseChan chan struct{}
            	respMu       sync.Mutex
}

func (s *Server) GetResponseChan() <-chan struct{} {
    	s.respMu.Lock()
        	defer s.respMu.Unlock()
            	
                	if s.responseChan == nil {
                        		s.responseChan = make(chan struct{}, 1)
                    }
                    	return s.responseChan
}

func (s *Server) MarkAlive() {
    	s.respMu.Lock()
        	defer s.respMu.Unlock()
            	
                	if s.responseChan == nil {
                        		s.responseChan = make(chan struct{}, 1)
                    }
                    	
                        	select {
                                	case s.responseChan <- struct{}{}:
                                    	default:
                            }
}
```

### Преимущества этого решения:

1. **Один ICMP-сокет** для всех серверов вместо множества соединений
2. **Централизованная обработка** входящих пакетов
3. **Эффективное распределение** ответов по соответствующим серверам
4. **Минимизация ложных срабатываний** - ответы проверяются по ID перед обработкой
5. **Меньше накладных расходов** на создание/удаление соединений

Это решение должно решить вашу проблему с ложными срабатываниями и неправильным определением статуса "dead". Центральный обработчик гарантирует, что каждый сервер получает только предназначенные ему ответы.
                            }
                    }
}
                    }
}
}
                                                                                                                                    }
                                                                                                            }
                                                                                        }
                                }
                    }
}
                        }
            }
}
                                                }
                            }
                            }
                                                                                        }
                                                                                }
                                                                }
                }
}
)
)
}
                        }
                                            }
                }
            }
}
                                                                                                    }
                    }
        }
}
                                                                                                                                                                }
                                                                                                                                }
                                                                                                                    }
                                                                                                        }
                                                                                                    }
                                                                                }
                        }
            }
}
}
}
}
                }
            }
}
}
}
)
                                                                                                                                                    }
                                                                                                                                        }
                                                                                                                        }
                                                                                    }
                                                            }
                                                    }
                            }
                    }))
}
)
)